* Lambda Calculus Variables
- https://www3.cs.stonybrook.edu/~cram/cse526/Spring20/Lectures/untyped-lambda.pdf


#+BEGIN_SRC
t ::=         Terms
          x   Variable
        | λx. t Abstraction
        | t t Application
#+END_SRC

- ~(λx. t)~ is a function with formal parameter ~x~ that returns the term ~t~
- ~λx.λy x)~ is a function that takes two arguments x and y and returns the first argument
- ~(t_1 t_2)~ is a function call where ~t_1~ is a function and ~t_2~ is the supplied argument
- ~((λx. x) y)~ supplies ~y~ as the argument to the identity function

Parentheses can be dropped:
- application is left associative ~((f f) x)~ is the same as ~f f x~
- λ binds as much as possible to the right: ~λf. λx. f (f x)~ is the same as ~(λf. (λx. f (f x)))~

- multiple consecutive abstractions can be combined: ~λf.λx.f (f x)~ is same as ~λf x. f (f x)~

Example of Application

1. ~((λwyx. y (w y x)) (λsz. z))~
2. ~((λyx. y ((λsz. z) y x)))~
3. ~(λyx. y ((λsz. z) y x))~
3. ~(λyx. y x)~

Another way:

1. ~((λwyx. y (w y x)) (λsz. z))~
2. ~(λyx. y ((λsz. z) y x))~
3. ~(λyx. y ((λz. z) x))~
3. ~(λyx. y x)~

- an application: replace every occurrence of the formal parameter in the body of the function with the given argument

Encoding Booleans in the λ-Calculus: The Church Encoding of Booleans

- ~true~: ~λx. λy. x~
- ~false~: ~λx. λy. y~
- ~&&~: ~λx. λy. ((x y) false)~
- ~||~: ~λx. λy (( x true) y)~
- ~!~: ~λx. ((x false) true)~
- ~if~: ~λc. λt. λe. ((c t) e)~

Example:

1. ~(true && false)~
2. ~(λx y. ((x y) false))~
3. ~(λy. (((λx. λy. x) y) false))~ apply x as true
4. ~(((λx. λy. x) (λx. λy. y)) false)~ apply y as false
5. ~(((λxy. x) (λxy. y)) false)~
6. ~((λy. (λxy. y)) false)~ outer y is false but don't apply it anywhere
7. ~(λxy. y)~
8. ~false~

Church Encoding of Natural Numbers in the λ-Calculus
- ~0~: ~λs. λz. z~
- ~1~: ~λs. λz. (s z)~
- ~3~: ~λs. λz. (s (s z))~
